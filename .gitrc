# @name gitrc
# @package shell_customs
# @subpackage git
# @author Ralph Dittrich <kizetsu.rd@googlemail.com>
# @created 28.01.2016
#

# git aliases
alias uncommit='git reset --soft HEAD~1'

# gtt aliases
alias gtt='gittool'
alias status='gtt status'
alias gitst='gtt short-status'
alias start='gtt start'
alias publish='gtt publish'
alias finish='gtt finish'
alias init-flow='gtt init flow'

# functions

# git add {file(s)} or everything that has changed
gadd() {
    if [ $# -ne 0 ]; then
        case $1 in
            --help|-h)
                echo "usage: gadd [filename]"
                ;;
            *)
                # add file
                command git add $@
                ;;
        esac
    else
        # add all files
        command git add --all
        # get list of tracked files
        GSTATUS=$(git status -s)
        if [ "${GSTATUS}" != "" ]; then
            # change codes to values and get colors
            GSTATUS="${GSTATUS// A /\\033[1;31m- \\033[0;32mAdded      }"  # Added Files (added files not added for commit)
            GSTATUS="${GSTATUS//AM /\\033[1;31m! \\033[0;32mAdded       }" # Added Files(modified after git add)
            GSTATUS="${GSTATUS//A /\\033[0;32m+ \\033[0;32mAdded      }"   # Added Files
            GSTATUS="${GSTATUS// M /\\033[1;31m- \\033[1;33mModified   }"  # Modified Files (modified files not added for commit)
            GSTATUS="${GSTATUS//MM /\\033[1;31m! \\033[1;33mModified    }" # Modified Files (modified after git add)
            GSTATUS="${GSTATUS//M /\\033[0;32m+ \\033[1;33mModified   }"   # Modified Files
            GSTATUS="${GSTATUS// D /\\033[1;31m- \033[1;31mDeleted    }"  # Deleted Files (deleted files not added for commit)
            GSTATUS="${GSTATUS//D /\\033[0;32m+ \\033[1;31mDeleted    }"   # Deleted Files
            GSTATUS="${GSTATUS//\?\? /\\033[0;37mUntracked   }"           # Untracked Files
        else
            GSTATUS="\033[1;33mnothing to show\033[0m"
        fi
        # output list of Files
        echo -e "${GSTATUS}\033[0m"
    fi
}


# shortcut for gitclone
# @TODO: change to cases and integrate server adresses like for github, gitlab and so on
glone() {
    if [ $# -ne 0 ]; then
        command git clone $@
    else
        echo "usage: glone [GITPATH (e.g. http://github.com/kizetsu/shell_customs)]"
    fi
}


# extends git for some functions
# everything that is unknown to gittool will be handed over to git
gittool() {
    case $1 in
        cp)
            case $2 in
                --help|-h)
                    echo "usage: gittool cp COMMIT_MASSAGE"
                    echo "careful: # causes errors. You have to quote this."
                    ;;
                *)
                    #commit and push
                    COMMIT_MSG="${@:2}"
                    echo "git commit -m ${COMMIT_MSG}"
                    command git commit -m "${COMMIT_MSG}"
                    command git push
                    ;;
            esac
            ;;
        commit-m)
            case $2 in
                --help|-h)
                    echo "usage: gittool commit-m COMMIT_MASSAGE"
                    ;;
                *)
                    #commit and push
                    COMMIT_MSG="${@:2}"
                    echo "git commit -m ${COMMIT_MSG}"
                    command git commit -m "${COMMIT_MSG}"
                    ;;
            esac
            ;;
        init)
            # git init extension
            case $2 in
                --help|-h)
                    echo "usage: gittool init {flow|lab|full}"
                    ;;
                flow)
                    # simple git flow init
                    command git flow init -d
                    ;;
                lab)
                    # init for github / gitlab
                    command git init
                    command touch README.md
                    command git add --all
                    command git commit -m "initial commit"
                    command git log
                    ;;
                full)
                    # full init with flow
                    command git init
                    command touch README.md
                    command git add --all
                    command git flow init -d
                    command git log
                    ;;
                ''|*)
                    command git init ${@:2}
                    ;;
            esac
            ;;
        # START: short git flow commands ->
        start)
            case $2 in
                --help|-h)
                    echo "usage: gittool start {release|feature|hotfix} NAME"
                    ;;
                *)
                    command git flow $2 start $3
                    command git push --set-upstream origin $2/$3
                    ;;
            esac
            ;;
        publish)
            case $2 in
                --help|-h)
                    echo "usage: gittool publish {release|feature|hotfix} NAME"
                    ;;
                *)
                    command git flow $2 publish $3
                    ;;
            esac
            ;;
        finish)
            case $2 in
                --help|-h)
                    echo "usage: gittool finish {release|feature|hotfix} NAME"
                    ;;
                *)
                    command git flow $2 finish $3
                    ;;
            esac
            ;;
        # <- END: short git flow commands
        short-status)
            # get list of tracked files
            GSTATUS=$(git status -s)
            if [ "${GSTATUS}" != "" ]; then
                # change codes to values and get colors
                GSTATUS="${GSTATUS// A /\\033[0;32mAdded       }"             # Added Files (added files not added for commit)
                GSTATUS="${GSTATUS//AM /\\033[1;31m! \\033[0;32mAdded     }" # Added Files(modified after git add)
                GSTATUS="${GSTATUS//A /\\033[0;32m+ \\033[0;32mAdded     }"  # Added Files
                GSTATUS="${GSTATUS// M /\\033[1;33mModified    }"             # Modified Files (modified files not added for commit)
                GSTATUS="${GSTATUS//MM /\\033[1;31m! \\033[1;33mModified  }" # Modified Files (modified after git add)
                GSTATUS="${GSTATUS//M /\\033[0;32m+ \\033[1;33mModified  }"  # Modified Files
                GSTATUS="${GSTATUS// D /\\033[1;31mDeleted     }"             # Deleted Files (deleted files not added for commit)
                GSTATUS="${GSTATUS//D /\\033[0;32m+ \\033[1;31mDeleted   }"  # Deleted Files
                GSTATUS="${GSTATUS//\?\? /\\033[0;37mUntracked   }"          # Untracked Files
            else
                GSTATUS="\033[1;33mnothing to show\033[0m"
            fi
            # output list of Files
            echo -e "${GSTATUS}\033[0m"
            ;;
        secure-checkout)
            MSG=$(git checkout ${@:2})
            MSG="${MSG//behind/\\033[1;31mbehind \\033[0m}"
            MSG="${MSG//ahead/\\033[1;33mahead \\033[0m}"
            echo -e "${MSG}\033[0m"
            ;;
        colordiff)
            # get short-status like coloured git diff (git diff --name-status)
            case $2 in
                '')
                    GDBRANCH=''
                    ;;
                *)
                    GDBRANCH="${2}"
                    ;;
            esac
            GDIFF=$(git diff --name-status ${GDBRANCH})
            if [ "${GDIFF}" != "" ]; then
                # change codes to values and get colors
                GDIFF="${GDIFF//A$'\t'/\\033[0;32m \\033[0;32mAdded     }"  # Added Files
                GDIFF="${GDIFF//M$'\t'/\\033[0;32m \\033[1;33mModified  }"  # Modified Files
                GDIFF="${GDIFF//D$'\t'/\\033[0;32m \\033[1;31mDeleted   }"  # Deleted Files
            else
                GDIFF="\033[1;33mnothing to show\033[0m"
            fi
            # output list of Files
            echo -e "${GDIFF}\033[0m"
            ;;
        help)
            githelp ${@:2}
            ;;
        *)
            command git $@
            ;;
    esac
}


githelp() {
    case $1 in
        short-status)
            echo "usage: gittool short-status"
            echo "showcases:"
            echo ""
            echo -e "    \033[0;37mUntracked Files"
            echo ""
            echo -e "\033[0;37mtracked but not added for commit"
            echo -e "    \033[0;32mAdded Files"
            echo -e "    \033[1;33mModified Files"
            echo -e "    \033[1;31mDeleted Files"
            echo ""
            echo -e "\033[0;37madded for commit"
            echo -e "    \033[0;32m+ \033[0;32mAdded Files"
            echo -e "    \033[0;32m+ \033[1;33mModified Files"
            echo -e "    \033[0;32m+ \033[1;31mDeleted Files"
            echo ""
            echo -e "\033[0;37mmodified after added for commit (you need to re-add)"
            echo -e "    \033[1;31m! \033[0;32mAdded Files"
            echo -e "    \033[1;31m! \033[1;33mModified Files"
            ;;
        init)
            echo "usage: gittool init [option]"
            echo ""
            echo "options:"
            echo "    flow                  git flow init (with defaults)"
            echo "    lab                   git init with readme.md and initial commit"
            echo "    full                  git init && git flow init with readme.md and initial commit"
            echo ""
            echo "hint:"
            echo "    if no option is given, git will only execute a standard git init."
            ;;
        '')
            echo -e "\033[1;33musages for modified git functions:\033[0;37m"
            echo "functions:"
            echo "    cp                    git commit -m \"MESSAGE\" && git push"
            echo "    commit-m              git commit -m \"MESSAGE\""
            echo "    init                  git init with nice options. See: gittool help init"
            echo "    start                 git flow {release|feature|hotfix} start [name]"
            echo "    publish               git flow {release|feature|hotfix} publish [name]"
            echo "    finish                git flow {release|feature|hotfix} finish [name]"
            echo "    short-status          coloured version of: git status -s"
            echo -e "    secure-checkout       git checkout with coloured hint \\033[1;31mbehind \\033[0m and \\033[1;33mahead \\033[0m"
            echo "    colordiff             coloured version of: git diff --name-status"
            echo ""
            echo "aliases:"
            echo "    gtt                   (alias for) gittool"
            echo "    gitst                 (alias for) gittool short-status"
            echo "    status                (alias for) gittool status"
            echo "    start                 (alias for) gittool start"
            echo "    publish               (alias for) gittool publish"
            echo "    finish                (alias for) gittool finish"
            echo "    init-flow             (alias for) gittool init flow"
            echo "    uncommit              (alias for) git reset --soft HEAD~1"
            echo ""
            echo -e "\033[1;33mgit configurations:\033[0;37m"
            test -f ~/.gitconfig && cat ~/.gitconfig
            echo ""
            echo -e "\033[1;33musages for standard git functions:\033[0;37m"
            command git --help
            ;;
        *)
            command git --help $@
    esac
}