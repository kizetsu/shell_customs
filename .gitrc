# @name gitrc
# @package shell_customs
# @subpackage git
# @author Ralph Dittrich <kizetsu.rd@googlemail.com>
# @created 28.01.2016
#

# git aliases
alias status='git status'
alias gitst='git short-status'
alias start='git start'
alias publish='git publish'
alias finish='git finish'
alias init-flow='git init flow'

# functions

# git add {file(s)} or everything that has changed
gadd() {
    if [ $# -ne 0 ]; then
        command git add $@
    else
        command git add --all
        # get list of tracked files
        GSTATUS=$(git status -s)
        if [ "${GSTATUS}" != "" ]; then
            # change codes to values and get colors
            GSTATUS="${GSTATUS// A /\033[1;31m- \033[0;32mAdded      }"  # Added Files (added files not added for commit)
            GSTATUS="${GSTATUS//AM /\033[1;31m! \033[0;32mAdded       }" # Added Files(modified after git add)
            GSTATUS="${GSTATUS//A /\033[0;32m+ \033[0;32mAdded      }"   # Added Files
            GSTATUS="${GSTATUS// M /\033[1;31m- \033[1;33mModified   }"  # Modified Files (modified files not added for commit)
            GSTATUS="${GSTATUS//MM /\033[1;31m! \033[1;33mModified    }" # Modified Files (modified after git add)
            GSTATUS="${GSTATUS//M /\033[0;32m+ \033[1;33mModified   }"   # Modified Files
            GSTATUS="${GSTATUS// D /\033[1;31m- \033[1;31mDeleted    }"  # Deleted Files (deleted files not added for commit)
            GSTATUS="${GSTATUS//D /\033[0;32m+ \033[1;31mDeleted    }"   # Deleted Files
            GSTATUS="${GSTATUS//\?\? /\033[0;37mUntracked   }"           # Untracked Files
        else
            GSTATUS="\033[1;33mnothing to show\033[0m"
        fi
        # output list of Files
        echo -e "${GSTATUS}"
    fi
}

# shortcut for gitclone
# @TODO: change to cases and integrate server adresses like for github, gitlab and so on
glone() {
    if [ $# -ne 0 ]; then
        command git clone $@
    else
        echo "usage: glone [GITPATH (e.g. http://github.com/kizetsu/shell_customs)]"
    fi
}

# extends git for some functions
git() {
    case $1 in
        cp)
            #commit and push
            COMMIT_MSG="${@:2}"
            echo "git commit -m ${COMMIT_MSG}"
            command git commit -m "${COMMIT_MSG}"
            command git push
            ;;
        reroll)
            # carefull! it's a rebase command that is not fully testet
            command git checkout -b stached
            command git pull
            command git add --all
            command git commit -m "project reroll"
            command git merge master
            command git -f push origin master
            ;;
        init)
            # git init extension
            case $2 in
                flow)
                    # simple git flow init
                    command git flow init -d
                    ;;
                lab)
                    # init for github / gitlab
                    command git init
                    command touch README.md
                    command git add --all
                    command git commit -m "initial commit"
                    command git log
                    ;;
                full)
                    # full init with flow
                    command git init
                    command touch README.md
                    command git add --all
                    command git flow init -d
                    command git log
                    ;;
                ''|*)
                    command git init ${@:2}
                    ;;
            esac
            ;;
        # short git flow commands ->
        start)
            command git flow $2 start $3
            command git push --set-upstream origin $2/$3
            ;;
        publish)
            command git flow $2 publish $3
            ;;
        finish)
            command git flow $2 finish $3
            ;;
        # <- short git flow commands
        help)
            githelp ${@:2}
            ;;
        short-status)
            # get list of tracked files
            GSTATUS=$(git status -s)
            if [ "${GSTATUS}" != "" ]; then
                # change codes to values and get colors
                GSTATUS="${GSTATUS// A /\033[0;32mAdded      }"             # Added Files (added files not added for commit)
                GSTATUS="${GSTATUS//AM /\033[1;31m! \033[0;32mAdded       }" # Added Files(modified after git add)
                GSTATUS="${GSTATUS//A /\033[0;32m+ \033[0;32mAdded      }"  # Added Files
                GSTATUS="${GSTATUS// M /\033[1;33mModified   }"             # Modified Files (modified files not added for commit)
                GSTATUS="${GSTATUS//MM /\033[1;31m! \033[1;33mModified    }" # Modified Files (modified after git add)
                GSTATUS="${GSTATUS//M /\033[0;32m+ \033[1;33mModified   }"  # Modified Files
                GSTATUS="${GSTATUS// D /\033[1;31mDeleted    }"             # Deleted Files (deleted files not added for commit)
                GSTATUS="${GSTATUS//D /\033[0;32m+ \033[1;31mDeleted    }"  # Deleted Files
                GSTATUS="${GSTATUS//\?\? /\033[0;37mUntracked   }"          # Untracked Files
            else
                GSTATUS="\033[1;33mnothing to show\033[0m"
            fi
            # output list of Files
            echo -e "${GSTATUS}"
            ;;
        *)
            command git $@
            ;;
    esac
}

githelp() {
    case $1 in
        cp)
            echo "usage: git cp COMMIT_MASSAGE"
            echo "careful: # causes errors"
            ;;
        reroll)
            echo "usage: git reroll"
            echo ""
            echo "be careful. This ccan't be undone!"
            echo "This command "
            ;;
        short-status)
            echo "showcases:"
            echo ""
            echo -e " \033[0;37mUntracked Files"
            echo ""
            echo -e "\033[0;37mtracked but not added for commit"
            echo -e " \033[0;32mAdded Files"
            echo -e " \033[1;33mModified Files"
            echo -e " \033[1;31mDeleted Files"
            echo ""
            echo -e "\033[0;37madded for commit"
            echo -e " \033[0;32m+ \033[0;32mAdded Files"
            echo -e " \033[0;32m+ \033[1;33mModified Files"
            echo -e " \033[0;32m+ \033[1;31mDeleted Files"
            echo ""
            echo -e "\033[0;37mmodified after added for commit (you need to re-add)"
            echo -e " \033[1;31m! \033[0;32mAdded Files"
            echo -e " \033[1;31m! \033[1;33mModified Files"
            ;;
        '')
            echo "usages for modified git functions:"
            echo "  git cp                git commit -m \"MESSAGE\"; git push"
            echo "  git reroll            (BETA) force current status to master branch"
            echo "  git init lab          git init with readme.md and initial commit"
            echo "  git init flow         git flow init (with defaults)"
            echo "  git init full         git init && git flow init with readme.md and initial commit"
            echo "  git lab               (BETA) creates a git.conf file"
            echo "  git start             git flow {release|feature|hotfix} start [name]"
            echo "  git publish           git flow {release|feature|hotfix} publish [name]"
            echo "  git finish            git flow {release|feature|hotfix} finish [name]"
            echo ""
            echo "  gadd                  (alias for) git add"
            echo "  glone                 (alias for) git clone"
            echo "  gitst                 (alias for) git short-status"
            echo "  status                (alias for) git status"
            echo "  start                 (alias for) git start"
            echo "  publish               (alias for) git publish"
            echo "  finish                (alias for) git finish"
            echo "  init-flow             (alias for) git init flow"
            echo ""
            echo "usages for standard git functions:"
            command git --help
            ;;
        *)
            command git --help $@
    esac
}